"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.buildUrl = exports.haveParametersChanged = exports.extractNextParameters = exports._internals = void 0;
const dntShim = __importStar(require("../_dnt.shims.js"));
const version_js_1 = require("../version.js");
/**
 * This `_internals` object is needed to support stubbing/spying of
 * fetch, execute and getBaseUrl.
 * https://deno.land/manual@v1.28.3/basics/testing/mocking
 *
 * If fetch is stubbed via `globalThis`, the test phase of the npm build fails.
 * ```ts
 * const fetchStub = stub(globalThis, "fetch", resolvesNext([new Response("data")]));
 * ```
 *
 * [`dnt`](https://github.com/denoland/dnt) shims `fetch` by relying on the
 * `undici` package. It replaces all references to `fetch` with `dntShim.fetch`.
 * As a side effect, stubbing `globalThis.fetch` becomes incorrect; we want to
 * stub `dntShim.fetch` instead.
 *
 * As a workaround, the `_internals` object serves as an indirection and we
 * stub the `fetch` key of this object instead.
 */
exports._internals = {
    fetch: dntShim.fetch,
    execute: execute,
    getBaseUrl: getBaseUrl,
};
/** Facilitates stubbing in tests, e.g. localhost as the base url */
function getBaseUrl() {
    return "https://serpapi.com";
}
function extractNextParameters(json) {
    const nextUrlString = json["serpapi_pagination"]?.["next"] ||
        json["pagination"]?.["next"];
    if (nextUrlString) {
        const nextUrl = new URL(nextUrlString);
        const nextParameters = Object.fromEntries(nextUrl.searchParams.entries());
        delete nextParameters["engine"];
        return nextParameters;
    }
}
exports.extractNextParameters = extractNextParameters;
function haveParametersChanged(parameters, nextParameters) {
    const keys = [
        ...Object.keys(parameters),
        ...Object.keys(nextParameters),
    ];
    const uniqueKeys = new Set(keys);
    return [...uniqueKeys].some((key) => `${parameters[key]}` !== `${nextParameters[key]}` // string comparison
    );
}
exports.haveParametersChanged = haveParametersChanged;
function getSource() {
    const moduleSource = `serpapi@${version_js_1.version}`;
    try {
        // Check if running in Node.js
        // dnt-shim-ignore
        // deno-lint-ignore no-explicit-any
        const nodeVersion = globalThis.process?.versions?.node;
        if (nodeVersion) {
            return `nodejs@${nodeVersion},${moduleSource}`;
        }
        // Assumes running in Deno instead. https://deno.land/api?s=Deno.version
        // Deno.version is not shimmed since it's not used when ran in a Node env.
        // dnt-shim-ignore
        // deno-lint-ignore no-explicit-any
        const denoVersion = globalThis.Deno?.version?.deno;
        if (denoVersion) {
            return `deno@${denoVersion},${moduleSource}`;
        }
        return `nodejs,${moduleSource}`;
    }
    catch {
        // If something unexpectedly occurs, revert to "nodejs".
        return `nodejs,${moduleSource}`;
    }
}
function buildUrl(path, parameters) {
    const nonUndefinedParams = Object.entries(parameters)
        .filter(([_, value]) => value !== undefined)
        .map(([key, value]) => [key, `${value}`]);
    const searchParams = new URLSearchParams(nonUndefinedParams);
    return `${exports._internals.getBaseUrl()}${path}?${searchParams}`;
}
exports.buildUrl = buildUrl;
async function execute(path, parameters, timeout) {
    const url = buildUrl(path, {
        ...parameters,
        source: getSource(),
    });
    return await exports._internals.fetch(url, {
        signal: AbortSignal.timeout(timeout),
    });
}
exports.execute = execute;
