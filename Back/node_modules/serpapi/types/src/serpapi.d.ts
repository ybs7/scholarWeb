import { AccountApiParameters, AccountInformation, BaseResponse, GetBySearchIdParameters, Locations, LocationsApiParameters } from "./types.js";
import { EngineMap } from "./engines/engine_map.js";
/**
 * Get a JSON response based on search parameters.
 * - Accepts an optional callback.
 * - Get the next page of results by calling the `.next()` method on the returned response object.
 *
 * @param {string} engine - engine name
 * @param {object} parameters - search query parameters for the engine
 * @param {fn=} callback - optional callback
 * @example
 * // single call (async/await)
 * const json = await getJson("google", { api_key: API_KEY, q: "coffee" });
 *
 * // single call (callback)
 * getJson("google", { api_key: API_KEY, q: "coffee" }, console.log);
 *
 * @example
 * // pagination (async/await)
 * const page1 = await getJson("google", { q: "coffee", start: 15 });
 * const page2 = await page1.next?.();
 *
 * @example
 * // pagination (callback)
 * getJson("google", { q: "coffee", start: 15 }, (page1) => {
 *   page1.next?.((page2) => {
 *     console.log(page2);
 *   });
 * });
 *
 * @example
 * // pagination loop (async/await)
 * const organicResults = [];
 * let page = await getJson("google", { api_key: API_KEY, q: "coffee" });
 * while (page) {
 *   organicResults.push(...page.organic_results);
 *   if (organicResults.length >= 30) break;
 *   page = await page.next?.();
 * }
 *
 * @example
 * // pagination loop (callback)
 * const organicResults = [];
 * getJson("google", { api_key: API_KEY, q: "coffee" }, (page) => {
 *   organicResults.push(...page.organic_results);
 *   if (organicResults.length < 30 && page.next) {
 *     page.next();
 *   }
 * });
 */
export declare function getJson<E extends keyof EngineMap>(engine: E, parameters: EngineMap[E]["parameters"], callback?: (json: BaseResponse<EngineMap[E]["parameters"]>) => void): Promise<BaseResponse<EngineMap[E]["parameters"]>>;
/**
 * Get a HTML response based on search parameters.
 * - Accepts an optional callback.
 * - Responds with a JSON string if the search request hasn't completed.
 *
 * @param {string} engine - engine name
 * @param {object} parameters - search query parameters for the engine
 * @param {fn=} callback - optional callback
 * @example
 * // async/await
 * const html = await getHtml("google", { api_key: API_KEY, q: "coffee" });
 *
 * // callback
 * getHtml("google", { api_key: API_KEY, q: "coffee" }, console.log);
 */
export declare function getHtml<E extends keyof EngineMap>(engine: E, parameters: EngineMap[E]["parameters"], callback?: (html: string) => void): Promise<string>;
/**
 * Get a JSON response given a search ID.
 * - This search ID can be obtained from the `search_metadata.id` key in the response.
 * - Typically used together with the `async` parameter.
 * - Accepts an optional callback.
 *
 * @param {string} searchId - search ID
 * @param {object} parameters
 * @param {string=} [parameters.api_key] - API key
 * @param {number=} [parameters.timeout] - timeout in milliseconds
 * @param {fn=} callback - optional callback
 * @example
 * const response = await getJson("google", { api_key: API_KEY, async: true, q: "coffee" });
 * const { id } = response.search_metadata;
 * await delay(1000); // wait for the request to be processed.
 *
 * // async/await
 * const json = await getJsonBySearchId(id, { api_key: API_KEY });
 *
 * // callback
 * getJsonBySearchId(id, { api_key: API_KEY }, console.log);
 */
export declare function getJsonBySearchId<R extends BaseResponse>(searchId: string, parameters?: GetBySearchIdParameters, callback?: (json: R) => void): Promise<R>;
/**
 * Get a HTML response given a search ID.
 * - This search ID can be obtained from the `search_metadata.id` key in the response.
 * - Typically used together with the `async` parameter.
 * - Accepts an optional callback.
 * - Responds with a JSON if the search request hasn't completed.
 *
 * @param {string} searchId - search ID
 * @param {object} parameters
 * @param {string=} [parameters.api_key] - API key
 * @param {number=} [parameters.timeout] - timeout in milliseconds
 * @param {fn=} callback - optional callback
 * @example
 * const response = await getJson("google", { api_key: API_KEY, async: true, q: "coffee" });
 * const { id } = response.search_metadata;
 * await delay(1000); // wait for the request to be processed.
 *
 * // async/await
 * const html = await getHtmlBySearchId(id, { api_key: API_KEY });
 *
 * // callback
 * getHtmlBySearchId(id, { api_key: API_KEY }, console.log);
 */
export declare function getHtmlBySearchId(searchId: string, parameters?: GetBySearchIdParameters, callback?: (html: string) => void): Promise<string>;
/**
 * Get account information of an API key.
 * https://serpapi.com/account-api
 *
 * @param {object} parameters
 * @param {string=} [parameters.api_key] - API key
 * @param {number=} [parameters.timeout] - timeout in milliseconds
 * @param {fn=} callback - optional callback
 * @example
 * // async/await
 * const info = await getAccount({ api_key: API_KEY });
 *
 * // callback
 * getAccount({ api_key: API_KEY }, console.log);
 */
export declare function getAccount(parameters?: AccountApiParameters, callback?: (info: AccountInformation) => void): Promise<AccountInformation>;
/**
 * Get supported locations. Does not require an API key.
 * https://serpapi.com/locations-api
 *
 * @param {object} parameters
 * @param {string=} [parameters.q] - query for a location
 * @param {number=} [parameters.limit] - limit on number of locations returned
 * @param {number=} [parameters.timeout] - timeout in milliseconds
 * @param {fn=} callback - optional callback
 * @example
 * // async/await
 * const locations = await getLocations({ limit: 3 });
 *
 * // callback
 * getLocations({ limit: 3 }, console.log);
 */
export declare function getLocations(parameters?: LocationsApiParameters, callback?: (locations: Locations) => void): Promise<Locations>;
