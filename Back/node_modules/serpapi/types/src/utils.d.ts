import * as dntShim from "../_dnt.shims.js";
import type { EngineMap } from "./engines/engine_map.js";
type UrlParameters = Record<string, string | number | boolean | undefined | null>;
/**
 * This `_internals` object is needed to support stubbing/spying of
 * fetch, execute and getBaseUrl.
 * https://deno.land/manual@v1.28.3/basics/testing/mocking
 *
 * If fetch is stubbed via `globalThis`, the test phase of the npm build fails.
 * ```ts
 * const fetchStub = stub(globalThis, "fetch", resolvesNext([new Response("data")]));
 * ```
 *
 * [`dnt`](https://github.com/denoland/dnt) shims `fetch` by relying on the
 * `undici` package. It replaces all references to `fetch` with `dntShim.fetch`.
 * As a side effect, stubbing `globalThis.fetch` becomes incorrect; we want to
 * stub `dntShim.fetch` instead.
 *
 * As a workaround, the `_internals` object serves as an indirection and we
 * stub the `fetch` key of this object instead.
 */
export declare const _internals: {
    fetch: typeof dntShim.fetch;
    execute: typeof execute;
    getBaseUrl: typeof getBaseUrl;
};
/** Facilitates stubbing in tests, e.g. localhost as the base url */
declare function getBaseUrl(): string;
type NextParametersKeys<E extends keyof EngineMap> = Omit<EngineMap[E]["parameters"], "api_key" | "no_cache" | "async" | "timeout">;
type NextParameters<E extends keyof EngineMap> = {
    [K in keyof NextParametersKeys<E>]: string;
};
export declare function extractNextParameters<E extends keyof EngineMap>(json: {
    serpapi_pagination?: {
        next: string;
    };
    pagination?: {
        next: string;
    };
}): NextParameters<E> | undefined;
export declare function haveParametersChanged(parameters: Record<string, unknown>, nextParameters: Record<string, unknown>): boolean;
export declare function buildUrl<P extends UrlParameters>(path: string, parameters: P): string;
export declare function execute<P extends UrlParameters>(path: string, parameters: P, timeout: number): Promise<dntShim.Response>;
export {};
